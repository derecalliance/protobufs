/*
 * Copyright (c) DeRec Alliance and its Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "result.proto";

package org.derecalliance.derec.protobuf;

/*
 * Request for all secret IDs held by the helper for this sharer, and all
 * share versions for each of them. This is used during recovery.
 */
message GetSecretIdsVersionsRequestMessage {
}


/*
  * Response to the sharer, giving all their secret IDs, and the list of
  * share versions stored by the helper for each of those secret IDs.
  * This is used during recovery. It will require the helper to have
  * authenticated this sharer in such a way that they can identify which
  * secrets they are holding for this sharer.  This could be based on
  * biometrics, or out-of-band credentials, or simply a human helper looking
  * at a list and identifying which individuals in that list correspond to
  * the sharer who is physically meeting them.
  *
  * This request will only be processed successfully when it is sent through
  * the communication channel of a secretID that was created during recovery
  * mode.
  */
message GetSecretIdsVersionsResponseMessage {
  /* the success or failure of processing the request */
  Result result = 1;
  /*
    * A list of secretLists, with one secretList for each secret ID stored
    * by this helper for this sharer.
    */
  repeated VersionList secretList = 2;

  /*
   * A list of version numbers stored by this helper for this sharer,
   * for the given secretId.
   */
  message VersionList {
    bytes secretId = 1;
    repeated int32 versions = 2;
  }
}

