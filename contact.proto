syntax = "proto3";
package org.derecalliance.derec.protobuf;

/**
* ----------------------------------------------------------------------------
* This is the sole message that is not a DeRecMessage. It is not encrypted,
* not signed, and not sent through the usual communication channels. It 
* might be in a QR code, presented by either the helper or sharer, and scanned
* by the other party.  Or it might be in an app that is provided by one party
* and used by another party.  Or it might be sent through an existing channel
* if the two parties already have some other relationship before they start
* the DeRec protocol. The nonce might be sent separately from the rest of it.
* ----------------------------------------------------------------------------
*/
message ContactMessage {
 /**
  * public key in PEM encoding format
  */
 string publicEncryptionKey = 1;
 
/**
  * A number used to later identify the publicEncryptionKey. 
  * When a message is sent to the creator of this contact, and it is encrypted
  * with the publicEncryptionKey, this identifier is also sent, so the recipient 
  * knows which key to use to decrypt it. If the recipient creates multiple 
  * keys for multiple pairings, then they should remember the publicKeyId that
  * they chose for each one, so they won't have to try all the keys during decryption. 
  */
 int32 publicKeyId = 2;

 /**
  * 64-bit (random) nonce to identify the pairing session. 
  * This should be given to a party after authenticating.
  */
 int64 nonce = 3;

 /**
  * URI endpoint for contacting the helper/sharer
  * This can be an https endpoint or a rabbitMQ endpoint
  */
 string transportUri = 4;

  /**
   * Message encoding mechanism
   */
  MessageEncodingEnum messageEncodingType = 5;

  enum MessageEncodingEnum {
   Protobuf = 0;
  }
}
